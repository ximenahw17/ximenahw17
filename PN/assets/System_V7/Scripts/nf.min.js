document.write('<scr' + 'ipt type="text/javascript" src="/System/Scripts/jquery-1.6.2.min.js" ></scr' + 'ipt>');
document.write('<scr' + 'ipt type="text/javascript" src="/System/Scripts/json2.js" ></scr' + 'ipt>');

function Num_Format0(num, inputDecimal) {
	this.VERSION = 'Number Format v1.5.4'; this.COMMA = ','; this.PERIOD = '.'; this.DASH = '-'; this.LEFT_PAREN = '('; this.RIGHT_PAREN = ')'; this.LEFT_OUTSIDE = 0; this.LEFT_INSIDE = 1; this.RIGHT_INSIDE = 2; this.RIGHT_OUTSIDE = 3; this.LEFT_DASH = 0; this.RIGHT_DASH = 1; this.PARENTHESIS = 2; this.NO_ROUNDING = -1
	this.num; this.numOriginal; this.hasSeparators = false; this.separatorValue; this.inputDecimalValue; this.decimalValue; this.negativeFormat; this.negativeRed; this.hasCurrency; this.currencyPosition; this.currencyValue; this.places; this.roundToPlaces; this.truncate; this.setNumber = setNumberNF; this.toUnformatted = toUnformattedNF; this.setInputDecimal = setInputDecimalNF; this.setSeparators = setSeparatorsNF; this.setCommas = setCommasNF; this.setNegativeFormat = setNegativeFormatNF; this.setNegativeRed = setNegativeRedNF; this.setCurrency = setCurrencyNF; this.setCurrencyPrefix = setCurrencyPrefixNF; this.setCurrencyValue = setCurrencyValueNF; this.setCurrencyPosition = setCurrencyPositionNF; this.setPlaces = setPlacesNF; this.toFormatted = toFormattedNF; this.toPercentage = toPercentageNF; this.getOriginal = getOriginalNF; this.moveDecimalRight = moveDecimalRightNF; this.moveDecimalLeft = moveDecimalLeftNF; this.getRounded = getRoundedNF; this.preserveZeros = preserveZerosNF; this.justNumber = justNumberNF; this.expandExponential = expandExponentialNF; this.getZeros = getZerosNF; this.moveDecimalAsString = moveDecimalAsStringNF; this.moveDecimal = moveDecimalNF; this.addSeparators = addSeparatorsNF; if (inputDecimal == null) { this.setNumber(num, this.PERIOD); } else { this.setNumber(num, inputDecimal); }
	this.setCommas(true); this.setNegativeFormat(this.LEFT_DASH); this.setNegativeRed(false); this.setCurrency(false); this.setCurrencyPrefix('$'); this.setPlaces(2);
}
function setInputDecimalNF(val)
{ this.inputDecimalValue = val; }
function setNumberNF(num, inputDecimal) {
	if (inputDecimal != null) { this.setInputDecimal(inputDecimal); }
	this.numOriginal = num; this.num = this.justNumber(num);
}
function toUnformattedNF()
{ return (this.num); }
function getOriginalNF()
{ return (this.numOriginal); }
function setNegativeFormatNF(format)
{ this.negativeFormat = format; }
function setNegativeRedNF(isRed)
{ this.negativeRed = isRed; }
function setSeparatorsNF(isC, separator, decimal) {
	this.hasSeparators = isC; if (separator == null) separator = this.COMMA; if (decimal == null) decimal = this.PERIOD; if (separator == decimal) { this.decimalValue = (decimal == this.PERIOD) ? this.COMMA : this.PERIOD; } else { this.decimalValue = decimal; }
	this.separatorValue = separator;
}
function setCommasNF(isC)
{ this.setSeparators(isC, this.COMMA, this.PERIOD); }
function setCurrencyNF(isC)
{ this.hasCurrency = isC; }
function setCurrencyValueNF(val)
{ this.currencyValue = val; }
function setCurrencyPrefixNF(cp)
{ this.setCurrencyValue(cp); this.setCurrencyPosition(this.LEFT_OUTSIDE); }
function setCurrencyPositionNF(cp)
{ this.currencyPosition = cp }
function setPlacesNF(p, tr)
{ this.roundToPlaces = !(p == this.NO_ROUNDING); this.truncate = (tr != null && tr); this.places = (p < 0) ? 0 : p; }
function addSeparatorsNF(nStr, inD, outD, sep) {
	nStr += ''; var dpos = nStr.indexOf(inD); var nStrEnd = ''; if (dpos != -1) { nStrEnd = outD + nStr.substring(dpos + 1, nStr.length); nStr = nStr.substring(0, dpos); }
	var rgx = /(\d+)(\d{3})/; while (rgx.test(nStr)) { nStr = nStr.replace(rgx, '$1' + sep + '$2'); }
	return nStr + nStrEnd;
}
function toFormattedNF() {
	var pos; var nNum = this.num; var nStr; var splitString = new Array(2); if (this.roundToPlaces) { nNum = this.getRounded(nNum); nStr = this.preserveZeros(Math.abs(nNum)); } else { nStr = this.expandExponential(Math.abs(nNum)); }
	if (this.hasSeparators) { nStr = this.addSeparators(nStr, this.PERIOD, this.decimalValue, this.separatorValue); } else { nStr = nStr.replace(new RegExp('\\' + this.PERIOD), this.decimalValue); }
	var c0 = ''; var n0 = ''; var c1 = ''; var n1 = ''; var n2 = ''; var c2 = ''; var n3 = ''; var c3 = ''; var negSignL = (this.negativeFormat == this.PARENTHESIS) ? this.LEFT_PAREN : this.DASH; var negSignR = (this.negativeFormat == this.PARENTHESIS) ? this.RIGHT_PAREN : this.DASH; if (this.currencyPosition == this.LEFT_OUTSIDE) {
		if (nNum < 0) { if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n1 = negSignL; if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n2 = negSignR; }
		if (this.hasCurrency) c0 = this.currencyValue;
	} else if (this.currencyPosition == this.LEFT_INSIDE) {
		if (nNum < 0) { if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n0 = negSignL; if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n3 = negSignR; }
		if (this.hasCurrency) c1 = this.currencyValue;
	}
	else if (this.currencyPosition == this.RIGHT_INSIDE) {
		if (nNum < 0) { if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n0 = negSignL; if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n3 = negSignR; }
		if (this.hasCurrency) c2 = this.currencyValue;
	}
	else if (this.currencyPosition == this.RIGHT_OUTSIDE) {
		if (nNum < 0) { if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n1 = negSignL; if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n2 = negSignR; }
		if (this.hasCurrency) c3 = this.currencyValue;
	}
	nStr = c0 + n0 + c1 + n1 + nStr + n2 + c2 + n3 + c3; if (this.negativeRed && nNum < 0) { nStr = '<font color="red">' + nStr + '</font>'; }
	return (nStr);
}
function toPercentageNF()
{ nNum = this.num * 100; nNum = this.getRounded(nNum); return nNum + '%'; }
function getZerosNF(places) {
	var extraZ = ''; var i; for (i = 0; i < places; i++) { extraZ += '0'; }
	return extraZ;
}
function expandExponentialNF(origVal) {
	if (isNaN(origVal)) return origVal; var newVal = parseFloat(origVal) + ''; var eLoc = newVal.toLowerCase().indexOf('e'); if (eLoc != -1) {
		var plusLoc = newVal.toLowerCase().indexOf('+'); var negLoc = newVal.toLowerCase().indexOf('-', eLoc); var justNumber = newVal.substring(0, eLoc); if (negLoc != -1) { var places = newVal.substring(negLoc + 1, newVal.length); justNumber = this.moveDecimalAsString(justNumber, true, parseInt(places)); } else { if (plusLoc == -1) plusLoc = eLoc; var places = newVal.substring(plusLoc + 1, newVal.length); justNumber = this.moveDecimalAsString(justNumber, false, parseInt(places)); }
		newVal = justNumber;
	}
	return newVal;
}
function moveDecimalRightNF(val, places) {
	var newVal = ''; if (places == null) { newVal = this.moveDecimal(val, false); } else { newVal = this.moveDecimal(val, false, places); }
	return newVal;
}
function moveDecimalLeftNF(val, places) {
	var newVal = ''; if (places == null) { newVal = this.moveDecimal(val, true); } else { newVal = this.moveDecimal(val, true, places); }
	return newVal;
}
function moveDecimalAsStringNF(val, left, places) {
	var spaces = (arguments.length < 3) ? this.places : places; if (spaces <= 0) return val; var newVal = val + ''; var extraZ = this.getZeros(spaces); var re1 = new RegExp('([0-9.]+)'); if (left) { newVal = newVal.replace(re1, extraZ + '$1'); var re2 = new RegExp('(-?)([0-9]*)([0-9]{' + spaces + '})(\\.?)'); newVal = newVal.replace(re2, '$1$2.$3'); } else {
		var reArray = re1.exec(newVal); if (reArray != null) { newVal = newVal.substring(0, reArray.index) + reArray[1] + extraZ + newVal.substring(reArray.index + reArray[0].length); }
		var re2 = new RegExp('(-?)([0-9]*)(\\.?)([0-9]{' + spaces + '})'); newVal = newVal.replace(re2, '$1$2$4.');
	}
	newVal = newVal.replace(/\.$/, ''); return newVal;
}
function moveDecimalNF(val, left, places) {
	var newVal = ''; if (places == null) { newVal = this.moveDecimalAsString(val, left); } else { newVal = this.moveDecimalAsString(val, left, places); }
	return parseFloat(newVal);
}
function getRoundedNF(val) {
	val = this.moveDecimalRight(val); if (this.truncate) { val = val >= 0 ? Math.floor(val) : Math.ceil(val); } else { val = Math.round(val); }
	val = this.moveDecimalLeft(val); return val;
}
function preserveZerosNF(val) {
	var i; val = this.expandExponential(val); if (this.places <= 0) return val; var decimalPos = val.indexOf('.'); if (decimalPos == -1) { val += '.'; for (i = 0; i < this.places; i++) { val += '0'; } } else { var actualDecimals = (val.length - 1) - decimalPos; var difference = this.places - actualDecimals; for (i = 0; i < difference; i++) { val += '0'; } }
	return val;
}
function justNumberNF(val) {
	newVal = val + ''; var isPercentage = false; if (newVal.indexOf('%') != -1) { newVal = newVal.replace(/\%/g, ''); isPercentage = true; }
	var re = new RegExp('[^\\' + this.inputDecimalValue + '\\d\\-\\+\\(\\)eE]', 'g'); newVal = newVal.replace(re, ''); var tempRe = new RegExp('[' + this.inputDecimalValue + ']', 'g'); var treArray = tempRe.exec(newVal); if (treArray != null) { var tempRight = newVal.substring(treArray.index + treArray[0].length); newVal = newVal.substring(0, treArray.index) + this.PERIOD + tempRight.replace(tempRe, ''); }
	if (newVal.charAt(newVal.length - 1) == this.DASH) { newVal = newVal.substring(0, newVal.length - 1); newVal = '-' + newVal; }
	else if (newVal.charAt(0) == this.LEFT_PAREN && newVal.charAt(newVal.length - 1) == this.RIGHT_PAREN) { newVal = newVal.substring(1, newVal.length - 1); newVal = '-' + newVal; }
	newVal = parseFloat(newVal); if (!isFinite(newVal)) { newVal = 0; }
	if (isPercentage) { newVal = this.moveDecimalLeft(newVal, 2); }
	return newVal;
}
function formatearAMoneda(NUMaF) {
	try {
		var numFdo = new Num_Format0(NUMaF.toString()); numFdo.setCurrency(true); numFdo.setCurrencyPosition(numFdo.LEFT_INSIDE);
		return numFdo.toFormatted();
	}
	catch (eror) { return 0; }
}
function OnlyNumeroRedondeado(NUMaF) {
	try {
		var numFdo = new Num_Format0(NUMaF.toString());
		numFdo.setCurrency(false);        
		numFdo.setSeparators(false, ',', ',');
		return Number(numFdo.toFormatted());
	}
	catch (eror) { return 0; }
}

function formatearAMonedaSinRedondeo(NUMaF) {
	try {
		var numFdo = new Num_Format0(NUMaF.toString()); numFdo.setCurrency(true); numFdo.setCurrencyPosition(numFdo.LEFT_INSIDE); numFdo.setPlaces('-1', false);
		return numFdo.toFormatted();
	}
	catch (eror) { return 0; } 
}
function OnlyNumero(Num) {
	try {
		var numOn = new Num_Format0(Num.toString());
		return Number(numOn.toUnformatted());
	} catch (err) { return 0; } 
}

function sleepProceso(ms)  //Sleep
{	var dt = new Date();	dt.setTime(dt.getTime() + ms);	while (new Date().getTime() < dt.getTime());}






/*funciones para formulas  //NO MODIFICAR
Miguel Anguiano
*/
function raizc(valores)
{ return Math.sqrt(valores); }
function aMayusculas(valores)
{ return valores.toUpperCase(); 
}
function mismoValor(valor)
{
    return 1; //si la formula es para poner un valor fijo
}
function esNumero(valor) {
    //console.log(!isNaN(parseFloat(n)) && isFinite(n));
    if(!isNaN(parseFloat(valor)) && isFinite(valor))
        return 1;

    return 0;
}
function promedio(valores)
{ valores = valores.toString(); var valores = valores.split(','); var contador = 1; while (contador < valores.length) { valores[0] = Number(valores[0]) + Number(valores[contador++]); } return Number(valores[0]) / valores.length; }
function sumatoria(valores)
{ valores = valores.toString(); var valores = valores.split(','); var contador = 1; while (contador < valores.length) { valores[0] = Number(valores[0]) + Number(valores[contador++]); } return Number(valores[0]); }
function maximo(valores)
{ valores = valores.toString(); var valores = valores.split(','); Array.max = function (array) { return Math.max.apply(Math, array); }; return Array.max(valores); }
function minimo(valores)
{ valores = valores.toString(); var valores = valores.split(','); Array.min = function (array) { return Math.min.apply(Math, array); }; return Array.min(valores); }
function contador(valores) { valores = valores.toString(); if (valores == "") return 0; return valores.split(',').length; }

function funFrmSumatoriaCapMul(numTabla, numCol, idCampoResultado) {
    try {
        var globSumatoriaCtrols = 0;
        var tbl = $("#TblReg-" + numTabla + " tr");
        var campoResultadoFrmCapMul = $find(idCampoResultado);
        if (tbl.length > 0 )
        {
            if (campoResultadoFrmCapMul != null)
            {
                tbl.each(function (index, value) {
                    if (index > 0) {
                        globSumatoriaCtrols += OnlyNumero($(this).find("td:eq(" + (numCol - 1) + ")")[0].innerHTML);
                    }
                });

                campoResultadoFrmCapMul.set_value(OnlyNumero(globSumatoriaCtrols));
            }
            else
            {
                console.log("Error funFrmSumatoriaCapMul:");
                console.log("numTabla:" + numTabla + ", numCol:" + numCol + ", idCampoResultado:" + idCampoResultado);
            }
        }
        
    }catch (e)
    {
        console.log(e.message);
    }
}
function funFrmValidaSelAlmenosUnRowFC(idConfigFC, mensaje)
{    
    var checados = $("#tblResultadoFc-" + idConfigFC + " input[type='checkbox'][id*='chkFc_" + idConfigFC + "']:checked").length;
    if (checados <= 0) {
        alert(mensaje);
        return false;
    }
    return true;
}

function funFrmObtienePrimerValorFC(idConfigFC, idResultado, noColumna)
{
    try {
        $("#tblResultadoFc-" + idConfigFC + " input[type='checkbox'][id*='chkFc_" + idConfigFC + "']").click(function ()
        {

            var primerChecado = $("#tblResultadoFc-" + idConfigFC + " input[type='checkbox'][id*='chkFc_" + idConfigFC + "']:checked").first();

            if (primerChecado.length > 0) {
                var fi = primerChecado.get(0).id.split("_")[2];

                var val = "";
                var ctrl = jQuery("#tblResultadoFc-" + idConfigFC + " #txtText_" + idConfigFC + "_" + fi + "_" + noColumna);
                if (ctrl.length > 0)
                {
                    val = ctrl.val();
                }
                else
                {
                    val = jQuery("#tblResultadoFc-" + idConfigFC + " #tcResFc_" + idConfigFC + "_" + fi + "_" + noColumna)[0].innerHTML;
                }

                var objDeResultado = $("#" + idResultado)[0];

                if (typeof (objDeResultado.value) != "undefined") {
                    objDeResultado.value = val;
                }
                else {
                    objDeResultado.innerHTML = val;
                }
            }
        });
    }
    catch (err)
    {
    }
}

function funFrmValidaCampoRadFechaAnioMayorYmenor(anioMenor, anioMayor, campotlrkFecha, mensaje)
{
    try{
        var fecCap = $find(campotlrkFecha);
        var fecha = fecCap.get_selectedDate();
        if (fecha != null)
        {
            var anioMeINT = Number(anioMenor);
            var anioMaINT = Number(anioMayor);

            if (fecha.getFullYear() < anioMeINT || fecha.getFullYear() > anioMaINT)
            {
                alert(mensaje);
                return false;
            }
        }
    }
    catch (e) { }

    return true;
}
function funFrmValidaFechasEntreSiporMes(fecha1, fecha2, mensaje)
{
    try{
        var fec1 = $find(fecha1).get_selectedDate();
        var fec2 = $find(fecha2).get_selectedDate();

        
       var mes1 = fec1.getMonth();
       var anio1 = fec1.getFullYear();
      
       var mes2 = fec2.getMonth();
       var anio2 = fec2.getFullYear();
      
      var fechava1 = new Date(anio1, mes1, 1);
      var fechava2 = new Date(anio2, mes2, 1);
      
        if (  fechava2 < fechava1)
        {
          alert(mensaje);
          return false;
        }
    }
    catch (e) { }

    return true;
}

function funFrmValidaFechasEntreSi(fecha1, fecha2, mensaje)
{
    try{
        var fec1;
        var fec2; 

        if (fecha1.indexOf('fec_') != -1) {
            fec1 = $find(fecha1).get_selectedDate();
        }
        else {
            var fecha = $("#" + fecha1).val();
            if (fecha == "") {
                var fecha = $("#" + fecha1).text();
            }
            var datos = fecha.split("/");

            fec1 =  new Date(OnlyNumero(datos[2]), OnlyNumero(datos[1]) - 1 , OnlyNumero(datos[0]));
        }

        if (fecha2.indexOf('fec_') != -1) {
            fec2 = $find(fecha2).get_selectedDate();
        }
        else {
            var fecha = $("#" + fecha2).val();
            if (fecha == "") {
                var fecha = $("#" + fecha2).text();
            }
            var datos = fecha.split("/");

            fec2 = new Date(OnlyNumero(datos[2]), OnlyNumero(datos[1]) - 1 , OnlyNumero(datos[0]));
        }

        if (fec2 < fec1)
        {
        	alert(mensaje);
            return false;
        }
    }
    catch (e) { console.log("error funFrmValidaFechasEntreSi:" + fecha1 + ".." + fecha2 + ".." + mensaje); }

    return true;
}

function funFrmValidaRowsSelCF(idFC, menor, mayor, mensaje)
{
    var cuantos = jQuery('#tblResultadoFc-' + idFC + ' input[type="checkbox"][id*="chkFc_' + idFC + '"]:checked').length;
    if (cuantos >= menor && cuantos <= mayor)
    {
        return true;
    }
    else
    {
        alert(mensaje);
        return false;
    }
}
function funFrmModifDecimalesTrk(idCampo, decimales) 
{
    try{
        var ctrlTelerik = $find(idCampo);

        ctrlTelerik.get_numberFormat().DecimalDigits = decimales;

        if(ctrlTelerik._initialValue !== ctrlTelerik.get_value())
        {
            ctrlTelerik.set_value(ctrlTelerik._initialValue);
        }
    }
    catch (e) 
    {
        console.log("Error funFrmModifDecimalesTrk: id:" + idCampo +" - dec:" +decimales );
    }
}

function funFrmConfirmacionDeValCapFC(idCampo, idFC, mensaje) {
    try {
         
        var varchkFC = $("#tblResultadoFc-" + idFC + " input[type='checkbox']:checked[id*='chkFc_" + idFC + "']");

        var ArrIDfilaChecada = varchkFC.attr("id").split("_");   // "chkFc_32_1_1"

        var ArrIdCampo = idCampo.split("_");
        var ctrl = $("#" + ArrIdCampo[0] + "_" + ArrIdCampo[1] + "_" + ArrIDfilaChecada[2] + "_" + ArrIdCampo[3]);


        if (ctrl.prop('tagName') == "SELECT") {
            if ( confirm(mensaje.replace("#valMsg#", ctrl.find("option:selected").text())) )
                return true;
            else
                return false;
        }
        else
        {
            if (confirm(mensaje.replace("#valMsg#", ctrl.val())))
                return true;
            else
                return false;
        }
    }
    catch (e)
    {
        console.log("Error funFrmConfirmacionDeValCap: id:" + idCampo + " - msg:" + mensaje);
    }
}

function funFrmValidaExprReg(idCtrl, exprReg, modificadores,  mensaje) {
    var control = $("#" + idCtrl);
    var re = new RegExp(exprReg, modificadores);

    control.focusout(function () {

        if (re.test(control.val())) {
            return true;
        }
        else {
            control.val('');
            control.css({ "border": "solid red 2px" });

            var offset = control.offset();
            var dvMensaje = $("<div style='background:#FFFEED;border-radius:3px;position:absolute;z-index:100;left:" + offset.left + "px; top:" + (offset.top - 18) + "px'>" + mensaje + "</div>");
            $("body").append(dvMensaje);

            setTimeout(function () {
                dvMensaje.remove();
                control.css("border", "");
                control.unbind("click");
            }, 4000);

            control.click(function () {
                dvMensaje.remove();
                control.css("border", "");
            });

            return false;
        }
    });
}

function getColumnaFRMCF(valores, numRows) {
	var fi = 0; var cadenaComas = "";
	var obj = valores.split('FF');
	var idConfig = valores.split('_')[1];

	
	$('#tblResultadoFc-' + idConfig + ' input[type="checkbox"]:checked').each(function () {
		fi = $(this).get(0).id.split("_")[2];

		var val = "";
		val = jQuery("#tblResultadoFc-" + idConfig + " #" + obj[0] + fi + obj[1])[0].value;

		if (!val) {
			val = jQuery("#tblResultadoFc-" + idConfig + " #" + obj[0] + fi + obj[1])[0].innerHTML;
		}

		cadenaComas += OnlyNumero(val) + ",";
	});

	if (cadenaComas.substring(cadenaComas.length - 1, cadenaComas.length) == ",")
	{
		cadenaComas = cadenaComas.substring(0, cadenaComas.length - 1);
	}
		
	return cadenaComas;
}

function getColumnaChk(valores, numRows) {
	var fi = 0; var cadenaComas = "";
	var obj = valores.split('FF');
	var idConfig = valores.split('_')[1];

	for (fi = 0; fi < numRows; fi++) {
		if (jQuery("#tblResultadoFc-" + idConfig + " #chkFc_" + idConfig + "_" + fi + "_1")[0].checked) 
		{
			if (fi + 1 < numRows) {
				cadenaComas += jQuery("#tblResultadoFc-" + idConfig + " #" + obj[0] + fi + obj[1])[0].checked ? '1,' : '0,';

			}
			else {
				cadenaComas += jQuery("#tblResultadoFc-" + idConfig + " #" + obj[0] + fi + obj[1])[0].checked ? '1' : '0';
			}
		}
	}
	return cadenaComas;
}

function sendDataAjax(parametros, esValidacion, idResultado, ResType, WmUrl) {
	if (!WmUrl)
		var WmUrl = '';

	var valorEntregado = false;
  
	var ValValidacion = jQuery.ajax({
		url: WmUrl != '' ? "/SUBSITIOS/SE/AS/ConfFormulas/MetodosFormulas.aspx/SumatoriaMonto" : "/SUBSITIOS/SE/AS/ConfFormulas/MetodosFormulas.aspx/processMethod",
		data: parametros,
		timeout: 20000,
		dataType: "json",
		type: "POST",
		async: false,
		contentType: "application/json; charset=utf-8",
		success: function (msg) {
			valorEntregado = AjaxOk(msg, esValidacion, idResultado, ResType);  
		},
		error: function (result) {
			alert('ERROR ' + result.status + ' - ' + result.statusText);
		}
	});


	if (esValidacion === true) {
		return ValValidacion;
	}
	else {        
		var seg = new Date();
		seg.setSeconds(seg.getSeconds() + 2);
		var tpasado = new Date();
		while (tpasado < ms )
		{
			tpasado = new Date();	 
		}
		if(!valorEntregado)
			alert('ocurrio un problema al regresar un valor');
		return valorEntregado;
	}
}

function AjaxOk(msg, esValidacion, idResultado, ResType)
{
	var Resultado = jQuery.parseJSON(msg.d);
	if (Resultado.Error) {
		alert(Resultado.Error);
	} else {
		if (!esValidacion) {
		    if (ResType == "telerik")
		    {
		        if (idResultado.indexOf("cmb_") != -1)//paracuando sea combo
		        {                                                           
		            var val = Resultado.val.split("»")[0]; //»
		            var desc = Resultado.val.split("»")[0] + " - " + Resultado.val.split("\u00BB")[1];
		            $find(idResultado).set_text(desc);
		            $find(idResultado).set_value(val);
		        }
		        else {
		            $find(idResultado).set_value(Resultado.val);
		        }
		    }
		    else if (ResType == "html") {
		        var objDeResultado = $("#" + idResultado)[0];
		        if (typeof (objDeResultado.value) != "undefined") {
		            objDeResultado.value = Resultado.val;
		        }
		        else {
		            objDeResultado.innerHTML = Resultado.val;
		        }
		    }
		}
	}

	return true;
}

function sendDataAjaxFrmEsp(parametros, funCallBack) {
    jQuery.ajax({
        url: "/SUBSITIOS/SE/AS/ConfFormulas/MetodosFormulas.aspx/processMethod",
        data: parametros,
        timeout: 10000,
        dataType: "json",
        type: "POST",
        async: false,
        contentType: "application/json; charset=utf-8",
        success: funCallBack,
        error: function (result) {
            alert('ERROR ' + result.status + ' - ' + result.statusText);
        }
    });
}
/*NO MODIFICAR */



